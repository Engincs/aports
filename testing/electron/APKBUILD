# Maintainer: psykose <alice@ayaya.dev>
pkgname=electron
pkgver=19.0.16
pkgrel=1
_gitrev=778fa44a0f276c0f862b2cd8bcf7845e29a199d2
_chromium=102.0.5005.167
_depot_tools=0af709772e2550d6605da5adb8dd816d9bc33aa5
pkgdesc="Electron cross-platform desktop toolkit"
url="https://github.com/electron/electron"
arch="aarch64 x86_64" # same as chromium
license="MIT"
depends="gtk+3.0 so:libudev.so.1 xdg-utils"
makedepends="
	alsa-lib-dev
	bash
	bsd-compat-headers
	bzip2-dev
	c-ares-dev
	cairo-dev
	clang-dev
	clang-extra-tools
	compiler-rt
	cups-dev
	curl-dev
	dbus-glib-dev
	eudev-dev
	ffmpeg-dev
	findutils
	flac-dev
	flex
	freetype-dev
	gperf
	gtk+3.0-dev
	gn
	gzip
	harfbuzz-dev
	hunspell-dev
	http-parser-dev
	hwids-usb
	java-jdk
	jpeg-dev
	jsoncpp-dev
	krb5-dev
	lcms2-dev
	libarchive-tools
	libbsd-dev
	libcap-dev
	libevent-dev
	libexif-dev
	libgcrypt-dev
	libjpeg-turbo-dev
	libnotify-dev
	libpng-dev
	libusb-dev
	libva-dev
	libwebp-dev
	libxcomposite-dev
	libxcursor-dev
	libxinerama-dev
	libxml2-dev
	libxrandr-dev
	libxscrnsaver-dev
	libxslt-dev
	linux-headers
	lld
	llvm
	mesa-dev
	minizip-dev
	nghttp2-dev
	nodejs
	npm
	nss-dev
	opus-dev
	pciutils-dev
	perl
	pipewire-dev
	pulseaudio-dev
	py3-httplib2
	py3-parsing
	py3-six
	python3
	re2-dev
	samurai
	snappy-dev
	speex-dev
	sqlite-dev
	xcb-proto
	yarn
	zlib-dev
	"
subpackages="$pkgname-lang $pkgname-dev"
# the lower patches are specific to electron, the top ones are from the equivalent chromium version
source="https://dev.alpinelinux.org/archive/electron/electron-$pkgver.tar.xz
	canonicalize-file-name.patch
	chromium-102-fenced_frame_utils-include.patch
	chromium-102-regex_pattern-array.patch
	chromium-VirtualCursor-standard-layout.patch
	chromium-revert-drop-of-system-java.patch
	chromium-use-alpine-target.patch
	credentials-sys-types-header.patch
	default-pthread-stacksize.patch
	dns-resolver.patch
	fix-crashpad.patch
	fix-missing-cstdint-include-musl.patch
	fix-narrowing-cast.patch
	gdbinit.patch
	iwyu-add-utility-for-std-exchange.patch
	libxml-unbundle.patch
	lto-core-count.patch
	memory-tagging-arm64.patch
	musl-sandbox.patch
	musl-tid-caching.patch
	musl-v8-monotonic-pthread-cont_timedwait.patch
	no-execinfo.patch
	no-glibc-version.patch
	no-mallinfo.patch
	no-res-ninit-nclose.patch
	no-stat-redefine.patch
	partition-atfork.patch
	push-back-nullptr.patch
	quiche-arena-size.patch
	remove-no-opaque-pointers-flag.patch
	roll-src-third_party-ffmpeg.patch
	scoped-file-no-close.patch
	temp-failure-retry.patch
	wtf-stacksize.patch

	python-jinja-3.10.patch
	system-node.patch
	vector-const.patch
	webpack-hash.patch

	default.conf
	electron-launcher.sh
	"
options="!check suid"

# clang uses much less memory (and this doesn't support gcc)
export CC=clang
export CXX=clang++

# required to find the tools
export AR=llvm-ar
export NM=llvm-nm
export LD=clang++

# less log spam, reproducible
export CFLAGS="${CFLAGS/-g/} -O2 -Wno-unknown-warning-option -Wno-builtin-macro-redefined -fno-plt"
export CXXFLAGS="${CXXFLAGS/-g/} -O2 -Wno-unknown-warning-option -Wno-builtin-macro-redefined -fno-plt"
export CPPFLAGS="$CPPFLAGS -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__="

_gn_flags() {
	echo "$@"
}

# creates a dist tarball that does not need to git clone everything at build time.
snapshot() {
	export CHROMIUM_BUILDTOOLS_PATH="$srcdir/src/buildtools"
	mkdir -p "$srcdir"
	cd "$srcdir"
	git clone --branch=$_chromium --depth=1 \
		https://chromium.googlesource.com/chromium/src.git

	git clone https://github.com/electron/electron.git

	(
		git clone --depth 1 -b main https://chromium.googlesource.com/chromium/tools/depot_tools.git
		cd depot_tools
		git fetch --depth 1 origin $_depot_tools
		git checkout $_depot_tools
	)

	export PATH="$PATH:$srcdir/depot_tools"

	echo "solutions = [
	{
		\"name\": \"src/electron\",
		\"url\": \"file://$srcdir/electron@$_gitrev\",
		\"deps_file\": \"DEPS\",
		\"managed\": False,
		\"custom_deps\": {
			\"src\": None,
		},
		\"custom_vars\": {},
	},
	]" > .gclient

	python3 depot_tools/gclient.py sync \
		--with_branch_heads \
		--with_tags \
		--nohooks

	python3 src/build/landmines.py
	python3 src/build/util/lastchange.py -o src/build/util/LASTCHANGE
	python3 src/build/util/lastchange.py -m GPU_LISTS_VERSION \
		--revision-id-only --header src/gpu/config/gpu_lists_version.h
	python3 src/build/util/lastchange.py -m SKIA_COMMIT_HASH \
		-s src/third_party/skia --header src/skia/ext/skia_commit_hash.h

	# why?
	cp -r electron/patches/ffmpeg src/electron/patches/

	python3 electron/script/apply_all_patches.py \
		electron/patches/config.json
	python3 src/tools/download_optimization_profile.py \
		--newest_state=src/chrome/android/profiles/newest.txt \
		--local_state=src/chrome/android/profiles/local.txt \
		--output_name=src/chrome/android/profiles/afdo.prof \
		--gs_url_base=chromeos-prebuilt/afdo-job/llvm

	mv src $pkgname-$pkgver

	# extra binaries are most likely things we don't want, so nuke them all
	for elf in $(scanelf -RA -F "%F" $pkgname-$pkgver); do
		rm -f "$elf"
	done

	msg "generating tarball.. (this takes a while)"
	tar -cf $pkgname-$pkgver.tar \
		--exclude="ChangeLog*" \
		--exclude="testdata/" \
		--exclude="test_data/" \
		--exclude="android_rust_toolchain/toolchain/" \
		--exclude-backups \
		--exclude-caches-all \
		--exclude-vcs \
		$pkgname-$pkgver

	xz -T0 -e -9 -vv -k $pkgname-$pkgver.tar
}

prepare() {
	default_prepare

	git init .

	# link to system tools
	ln -sfv /usr/bin/clang-format buildtools/linux64/clang-format
	mkdir -p third_party/node/linux/node-linux-x64/bin
	ln -sfv /usr/bin/node third_party/node/linux/node-linux-x64/bin/node
	ln -sfv /usr/bin/java third_party/jdk/current/bin/java

	(
		cd electron
		git init .
		yarn install --frozen-lockfile
	)

	(
		cd third_party/node
		npm ci
	)

	local use_system="
		ffmpeg
		flac
		fontconfig
		freetype
		harfbuzz-ng
		icu
		libdrm
		libevent
		libjpeg
		libpng
		libwebp
		libxml
		libxslt
		opus
		re2
		snappy
		zlib
		"

	for _lib in $use_system libjpeg_turbo; do
		msg "Removing buildscripts for system provided $_lib"
		find . -type f -path "*third_party/$_lib/*" \
			\! -path "*third_party/$_lib/chromium/*" \
			\! -path "*third_party/$_lib/google/*" \
			\! -path './base/third_party/icu/*' \
			\! -path './third_party/libxml/*' \
			\! -path './third_party/pdfium/third_party/freetype/include/pstables.h' \
			\! -path './third_party/harfbuzz-ng/utils/hb_scoped.h' \
			\! -path './third_party/crashpad/crashpad/third_party/zlib/zlib_crashpad.h' \
			\! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
			-delete
	done


	# https://groups.google.com/a/chromium.org/d/topic/chromium-packagers/9JX1N2nf4PU/discussion
	touch chrome/test/data/webui/i18n_process_css_test.html
	# Use the file at run time instead of effectively compiling it in
	sed 's|//third_party/usb_ids/usb.ids|/usr/share/hwdata/usb.ids|g' \
		-i services/device/public/cpp/usb/BUILD.gn

	python3 build/linux/unbundle/replace_gn_files.py --system-libraries \
		$use_system
	python3 third_party/libaddressinput/chromium/tools/update-strings.py

	# prevent annoying errors when regenerating gni
	sed -i 's,^update_readme$,#update_readme,' \
		third_party/libvpx/generate_gni.sh

	# allow system dependencies in "official builds"
	sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
		tools/generate_shim_headers/generate_shim_headers.py

	# https://crbug.com/893950
	sed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
		third_party/blink/renderer/core/xml/*.cc \
		third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
		third_party/libxml/chromium/*.cc \
		third_party/maldoca/src/maldoca/ole/oss_utils.h

	msg "Configuring build"

	local gn_config="
		import(\"//electron/build/args/release.gn\")
		blink_enable_generated_code_formatting=false
		chrome_pgo_phase=0
		clang_use_chrome_plugins=false
		custom_toolchain=\"//build/toolchain/linux/unbundle:default\"
		disable_fieldtrial_testing_config=true
		enable_hangout_services_extension=true
		enable_nacl=false
		enable_stripping=false
		enable_vr=false
		fatal_linker_warnings=false
		ffmpeg_branding=\"Chrome\"
		host_toolchain=\"//build/toolchain/linux/unbundle:default\"
		icu_use_data_file=true
		is_cfi=false
		is_component_ffmpeg=true
		is_debug=false
		is_official_build=true
		link_pulseaudio=true
		proprietary_codecs=true
		rtc_link_pipewire=true
		rtc_use_pipewire=true
		symbol_level=0
		treat_warnings_as_errors=false
		use_custom_libcxx=false
		use_gnome_keyring=false
		use_pulseaudio=true
		use_sysroot=false
		use_system_freetype=true
		use_system_harfbuzz=true
		use_system_lcms2=true
		use_system_libdrm=true
		use_system_libjpeg=true
		use_system_libpng=true
		use_system_wayland_scanner=true
		use_system_zlib=true
		use_vaapi=true
	"

	gn gen out/Release \
		--args="$(echo $gn_config)" \
		--export-compile-commands
}

build() {
	ninja -C out/Release \
		electron_dist_zip \
		node_gypi_headers \
		node_version_header \
		tar_headers
}

package() {
	mkdir -p "$pkgdir"/usr/lib/electron "$pkgdir"/usr/bin

	bsdtar -xf out/Release/dist.zip -C "$pkgdir"/usr/lib/electron

	chmod u+s "$pkgdir"/usr/lib/electron/chrome-sandbox

	install -Dm755 "$srcdir"/electron-launcher.sh "$pkgdir"/usr/bin/electron
	install -Dm755 "$srcdir"/default.conf "$pkgdir"/etc/electron/default.conf

	mkdir -p "$pkgdir"/usr/include/electron

	mv -v "$builddir"/out/Release/gen/node_headers "$pkgdir"/usr/include/electron
	ln -sv /usr/include/electron/node_headers/include/node "$pkgdir"/usr/include/electron/node

	mkdir -p "$pkgdir"/usr/include/electron/node_headers/include/nan
	cp -v "$builddir"/third_party/nan/*.h "$pkgdir"/usr/include/electron/node_headers/include/nan
	ln -sv /usr/include/electron/node_headers/include/nan "$pkgdir"/usr/include/electron/nan
}

lang() {
	pkgdesc="$pkgdesc (translations)"
	install_if="$pkgname=$pkgver-r$pkgrel lang"

	mkdir -p "$subpkgdir"/usr/lib/electron/locales

	mv "$pkgdir"/usr/lib/electron/locales/*.pak \
		"$subpkgdir"/usr/lib/electron/locales
	mv "$subpkgdir"/usr/lib/electron/locales/en-US.pak \
		"$pkgdir"/usr/lib/electron/locales
}

sha512sums="
c6e662e913f9f310e61bfd7708281d01d5966743d2e373fb1f49f07bab03e9c2df02de988d7eb108028b5f9fe7bfc2626caa9ad6f54dbeb2563ada73aff5913f  electron-19.0.16.tar.xz
252b37a2ecc5e7a25385943045f426dc2e30991b28d206ceaff1be7fd8ffeeb024310a8fca6b3e69a4b1c57db535d51c570935351053525f393682d5ecd0f9a9  canonicalize-file-name.patch
459910ac11dfd2953240a72836aac55c33d914906194897b38328f482173a101930cad1656906df0bc1c903d41199eee8089f474f5d8b056cfb12c8f2b0acffb  chromium-102-fenced_frame_utils-include.patch
a6f066e0cbb4e0644733b48013f150647b3c431dc5ebcbff611b3214c86739726208874f67cb339140045e7934e7636f7514bd7aec603545d47c7ab6ca205be4  chromium-102-regex_pattern-array.patch
ac0a80174f95d733f33ddc06fc88cdcf7db0973378c28d8544dc9c19e2dabeac47f91c99b3e7384f650b3405554a9e222543f0860b6acc407c078a8c9180d727  chromium-VirtualCursor-standard-layout.patch
c4654d5b23c6f5d9502507e534fe1951d6749c62251e49b6adfe10d1569431e7f7a5a6fa5ff09ec30984415ced27a5e20985df8c91295de34af3c84557fa5b91  chromium-revert-drop-of-system-java.patch
6add8b4c293f5392748a2eec9486cb4a6534e161977c6a98de71617b9abcdd1e8ad94b44014256a4b52e33eb9dd4aca380279d4161629a1bb2d7b15f8eb5b459  chromium-use-alpine-target.patch
274858323d040ac8c51bac90b6ef91bb075d7b8d92d73952ed700c10a8bae2c2115fb2a9cc6912de79be226c141d7106839fc3486e22c0206e75cb6d8ff65ee6  credentials-sys-types-header.patch
22da17c649ae9845d6a174187f2b666245a10db8a997169fc214c430fbba10143cfb57f8f6ece5acf856cd9ea09f293a1aca90cdf3e64fd9423b78beac53f517  default-pthread-stacksize.patch
cd7719c30518aeb659e9b7dc126241f897afe1a231e601271b63ba170e811a93b514c4d2a77680cdf0c846f81fa6db766ac619aa200efb32cbdfff6732a63893  dns-resolver.patch
9d1edb1e0624ee61825e3af23fbb8c5dbc09d2b92d7769d19f8ca618edae8de8a3e051fedf4ad92c230e1373dc8495922c46971aef93a580c04ad80bc33516c0  fix-crashpad.patch
8bebf4a9d5225c6e47edc5b07c4b97be24a45cc221f49632836915ceeb4ecb69b7f79a31ea7f82171cde3443f45fec541f409892542cf1014e81aa6acd01566d  fix-missing-cstdint-include-musl.patch
efe97b9dd2ec5965fa0cdf1b2a3c01253835c2df710da7ea105c4ce008c11f9caaf8b4321736a2b91f06d8d61972c08e225b16509dc05176a2c39337688ad5b9  fix-narrowing-cast.patch
82f2bd4aa613e792d3af6e7a8632e0920cf48504a7572fb97d5480ea182fa125fe526e7df1ce4311b5d139a3f78da0f0b54605fbd09d7cd43135906a7639e47f  gdbinit.patch
4d268992ddb341e70f4e730c82c676c0c95b3958bc9553bbe83383cebde7373c79a8e9aeef47c7af2add8353263b02ccfd7e5bd864f544a584361a02d30374ec  iwyu-add-utility-for-std-exchange.patch
17b54042c58cd448c7e26dca1504bb48d85fdd7c2385930e639c283493a5e430923041f01cde5a5dfaa32fbb7f0a645baca55b202d56d3f245fb4febdf026da2  libxml-unbundle.patch
1e004d2390a8031125345d39a98e03aab7fa5120317b632cfb250f705bd2983292f41e9c29637b2ea284d095b5747ac2d9664bf0a309e13967283b505f134a29  lto-core-count.patch
63e5b25c49af484964b3ac723da1c2f348812572a2e24ad412d2fb9eb7eec9ddc0e76568e76d1f352cdc562bc5003c93e04ee519a82e8568f48484d1682e237f  memory-tagging-arm64.patch
af7f8408a5125e2fd75372fcd9d6b355c96b97e1003e48634e54115b4e612c6f6d8d3a3c18d9a114363b6934e728aec1b94e93c8a2772785f88a83bbc7f42488  musl-sandbox.patch
a018cf58b9e34f73d588961f2f9a36de67267060fb2e77ebc562974c6c92a59009161e374cf9bbdc35e8bf1a7e90f0b90117a0d494dcd2e2bb2f5e6534925d0b  musl-tid-caching.patch
556cc2ba28184a75745f13c673605327f5be590be179eb3f941dc0abded854a814e5da1432a28fb8d4dcdcd66ffd4c94ee1a8824d2cd93b632f48e9310dbc3fa  musl-v8-monotonic-pthread-cont_timedwait.patch
3f90f888f015efd04636eee0e8431d41e073d432563553298d7b8be7650c397eb7d43a5bf682df1f66ffd7182852d4b836adb7dcd934f9b45247cdd99046e45c  no-execinfo.patch
caf9c4e4533b94dfe6b28350f8ea9654311b684dfd0c5ba768ab14775e0164f577dfd356cd507bcad9f378ec2c180c8e6edbde9bba62caf70fbac5a642edc61b  no-glibc-version.patch
86a75fd53f5fc0c7a0b1ea73bbc0a6966464f613c8c410684cc25e5eee09482490aece8d2925bcece2489e1e3c1d70c659c6b6220119d7d546bf651864258a3e  no-mallinfo.patch
3319fa42bd582679f449151de5905c582e156cf8dff850326cfbd7a97c92afea0b074ff1275e1ec923ed1491db2adec632d4222fed0f7f1c6607aee930ec9559  no-res-ninit-nclose.patch
0c0d3ed0a8f2bcecb2bf4eb56130fcd71031bb63744fb56e1b5a6b9dfbe16680607ff592e24602fe045b819509a70556e240b6fe0e876710977d60185f682df4  no-stat-redefine.patch
ad563e29ac7d83c203f5af966c4ed3ebdeb5c997835a45fb28ecde08dde5231d0a775fb413f44867af28724504c42316b27d5a6aaa602057642dcbdf7ec20a7a  partition-atfork.patch
36f8b96a8143355b7855a248473206c16101616d46978773c8fad92757bb24f60f23d843a25c219efe4b0a957f43aa7ea5ce5867b29228ef7371d1b886e528da  push-back-nullptr.patch
c7fc8a1a079224b9ed6a1f8331cef901833bec04f337fa122381e0a65a1acdd529368f6653dc6d03475381659e07e6e31dd2ec0530257606480f06d15faf3aaf  quiche-arena-size.patch
b5ca72a12045a8f25bed548b35ea03097a7ecc4c738d619e1c3b975b7da71352db9bb87088ce1059284385edb2a190051d8e47b668c5bd1e81e75f2fda151b65  remove-no-opaque-pointers-flag.patch
128ec0fd14349e065c8bb0910d53cbea7423182a06e06f7b7765f3cba1e5ba5e7a8bccbcdab079335b5235abb7bf0d46dee21ecc8c221be7e1c5c6d9795f958e  roll-src-third_party-ffmpeg.patch
9c44875bcc5dd5431226568ba52d225f086b321325371d9e9e01d1fd892049e5aff324a89ba8268f32c59ce1a47e0b0d5448c9162a45ee5a60a58eecb69ca788  scoped-file-no-close.patch
ece751cd29d28772dd0955c84f5553a6858ac24d06ccb66ac75fcfc6b13460cf5c1f27392c094487e20e08e621d2099c3b5cc9a2a819a458e8c56c78fea11269  temp-failure-retry.patch
1d4e8c6e65205e6b72af47b9a2fa6f96aaada9b7d5a74f4e11a345a885df3078b523d02aaf8e9dac3aa30d72bbbd07cd6dc7edcf44fb9ae57a7f81251c398f65  wtf-stacksize.patch
e05180199ee1d559e4e577cedd3e589844ecf40d98a86321bf1bea5607b02eeb5feb486deddae40e1005b644550331f6b8500177aa7e79bcb3750d3c1ceb76c3  python-jinja-3.10.patch
26a8e4040e69f335a7104f42d012b9d933a40985b33a7be02add27a801c097c5a2be4c6e69faf9175ce8945210ae4c5592ecad2123ccff2beee5473194a765e3  system-node.patch
71571b15cf8bd6259b7fd22bea0e46b64890f3db776365de33fe539f26ce9ef99459e05c3dde9434c3657225bc67160abc915acd93033cb487c770c6a2a5975f  vector-const.patch
2aa340854316f1284217c0ca17cbf44953684ad6c7da90815117df30928612eb9fb9ffb734b948dfc309cd25d1a67cd57f77aac2d052a3dd9aca07a3a58cbb30  webpack-hash.patch
08460b15037511a4e5469ceac6ae5dd4db4c8cb87c129aaaf40ba58b16c60b8a307ffdd85805efead235758abed09ec31db1ef4cf9159f7b9acdcee3031bc96c  default.conf
03750694e5e0b66f084c6e43135e60be15abb059e23486346ee4352dcc236984f2f35467b47f2b2ad46c98c22091cc2b978de8e73680febadba169d960f13f9f  electron-launcher.sh
"
