maintainer="Achill Gilgenast <achill@achill.org>"
_flavor=stable
pkgname=linux-$_flavor
pkgver=6.15.10
_kernver=${pkgver%.*}
pkgrel=0
pkgdesc="Linux stable kernel"
url="https://www.kernel.org"
depends="initramfs-generator"
_depends_dev="perl gmp-dev mpc1-dev mpfr-dev elfutils-dev bash flex bison zstd"
makedepends="$_depends_dev sed installkernel bc linux-headers linux-firmware-any openssl-dev>3 mawk
	diffutils findutils zstd pahole python3 gcc>=13.1.1_git20230624 bpftool"
provides="linux-edge=$pkgver-r$pkgrel"
options="!strip !check"
_config=${config:-config-stable.${CARCH}}
source="https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/linux-$_kernver.tar.xz
	0001-powerpc-boot-wrapper-Add-z-notext-flag-for-ppc64le.patch
	0002-x86-Compress-vmlinux-with-zstd-19-instead-of-22.patch
	0003-kexec-add-kexec_load_disabled-boot-option.patch
	0004-objtool-respect-AWK-setting.patch
	0005-powerpc-config-defang-gcc-check-for-stack-protector-.patch
	0006-UPSTREAM-powerpc-boot-Fix-build-with-gcc-15.patch
	0007-UPSTREAM-libbpf-Avoid-possible-use-of-uninitialized-.patch

	stable.aarch64.config
	stable.armv7.config
	stable.loongarch64.config
	stable.ppc64le.config
	stable.riscv64.config
	stable.s390x.config
	stable.x86.config
	stable.x86_64.config
	"
subpackages="$pkgname-dev:_dev:$CBUILD_ARCH $pkgname-doc"
for _i in $source; do
	case $_i in
	*.$CARCH.config)
		_f=${_i%."$CARCH".config}
		_flavors="$_flavors $_f"
		if [ "linux-$_f" != "$pkgname" ]; then
			subpackages="$subpackages linux-$_f::$CBUILD_ARCH linux-$_f-dev:_dev:$CBUILD_ARCH"
		fi
		;;
	esac
done
builddir="$srcdir"/linux-$_kernver

if [ "${pkgver%.0}" = "$pkgver" ]; then
	# Prepend to apply first
	source="patch-$pkgver.patch.xz::https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/patch-$pkgver.xz $source"
fi
arch="all !armhf"
license="GPL-2.0-only"

prepare() {
	default_prepare

	# remove localversion from patch if any
	rm -f localversion*
}

_kernelarch() {
	local arch="$1"
	case "$arch" in
		aarch64*) arch="arm64" ;;
		arm*) arch="arm" ;;
		ppc*) arch="powerpc" ;;
		s390*) arch="s390" ;;
		riscv*) arch="riscv" ;;
		loongarch64) arch="loongarch" ;;
	esac
	echo "$arch"
}

_prepareconfig() {
	local _flavor="$1"
	local _arch="$2"
	local _config=$_flavor.$_arch.config
	local _builddir="$srcdir"/build-$_flavor.$_arch
	mkdir -p "$_builddir"
	echo "-$pkgrel-$_flavor" > "$_builddir"/localversion-alpine

	cp "$srcdir"/$_config "$_builddir"/.config
	msg "Configuring $_flavor kernel ($_arch)"
	make -C "$builddir" \
		O="$_builddir" \
		ARCH="$(_kernelarch $_arch)" \
		olddefconfig

	if grep "CONFIG_MODULE_SIG=y" "$_builddir"/.config >/dev/null; then
		if [ -f "$KERNEL_SIGNING_KEY" ]; then
			sed -i -e "s:^CONFIG_MODULE_SIG_KEY=.*:CONFIG_MODULE_SIG_KEY=\"$KERNEL_SIGNING_KEY\":" \
				"$_builddir"/.config
			msg "Using $KERNEL_SIGNING_KEY to sign $_flavor kernel ($_arch) modules"
		else
			warning "KERNEL_SIGNING_KEY was not set. A signing key will be generated, but 3rd"
			warning "party modules can not be signed"
		fi
	fi
}

listconfigs() {
	for i in $source; do
		case "$i" in
			*.config) echo $i;;
		esac
	done
}

prepareconfigs() {
	for _config in $(listconfigs); do
		local _flavor=${_config%%.*}
		local _arch=${_config%.config}
		_arch=${_arch#*.}
		local _builddir="$srcdir"/build-$_flavor.$_arch
		_prepareconfig "$_flavor" "$_arch"
	done
}

# this is supposed to be run before version is bumped so we can compare
# what new kernel config knobs are introduced
prepareupdate() {
	clean && fetch && unpack && prepare && deps
	prepareconfigs
	rm -r "$builddir"
}

updateconfigs() {
	if ! [ -d "$builddir" ]; then
		deps && fetch && unpack && prepare
	fi
	for _config in ${CONFIGS:-$(listconfigs)}; do
		msg "updating $_config"
		local _flavor=${_config%%.*}
		local _arch=${_config%.config}
		_arch=${_arch#*.}
		local _builddir="$srcdir"/build-$_flavor.$_arch
		mkdir -p "$_builddir"
		echo "-$pkgrel-$_flavor" > "$_builddir"/localversion-alpine
		local actions="listnewconfig oldconfig"
		if ! [ -f "$_builddir"/.config ]; then
			cp "$srcdir"/$_config "$_builddir"/.config
			actions="olddefconfig"
		fi
		env | grep ^CONFIG_ >> "$_builddir"/.config || true
		make -j1 -C "$builddir" \
			O="$_builddir" \
			ARCH="$(_kernelarch $_arch)" \
			$actions savedefconfig

		cp "$_builddir"/defconfig "$startdir"/$_config
	done
}

set_kbuild_timestamp() {
	# KBUILD_BUILD_TIMESTAMP needs to be parsable by busybox date
	export KBUILD_BUILD_TIMESTAMP="$(date '+%Y-%m-%d %H:%M:%S' -u${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
}

build() {
	unset LDFLAGS
	# for some reason these sometimes leak into the kernel build,
	# -Werror=format-security breaks some stuff
	unset CFLAGS CPPFLAGS CXXFLAGS
	set_kbuild_timestamp
	for i in $_flavors; do
		_prepareconfig "$i" "$CARCH"
	done
	for i in $_flavors; do
		msg "Building $i kernel"
		cd "$srcdir"/build-$i.$CARCH

		# set org in cert for modules signing
		# https://www.kernel.org/doc/html/v6.1/admin-guide/module-signing.html#generating-signing-keys
		mkdir -p certs
		sed -e 's/#O = Unspecified company/O = alpinelinux.org/' \
			"$builddir"/certs/default_x509.genkey \
			> certs/x509.genkey

		make ARCH="$(_kernelarch $CARCH)" \
			CC="${CC:-gcc}" \
			AWK="${AWK:-mawk}" \
			KBUILD_BUILD_VERSION="$((pkgrel + 1 ))-Alpine"

		# Generate vmlinux.h
		bpftool btf dump file vmlinux format c > vmlinux.h
	done
}

_package() {
	local _buildflavor="$1" _outdir="$2"
	set_kbuild_timestamp

	cd "$srcdir"/build-$_buildflavor.$CARCH
	local _abi_release="$(make -s kernelrelease)"
	# modules_install seems to regenerate a defect Modules.symvers on s390x. Work
	# around it by backing it up and restore it after modules_install
	cp Module.symvers Module.symvers.backup

	mkdir -p "$_outdir"/boot "$_outdir"/lib/modules

	local _install
	case "$CARCH" in
		arm*|aarch64|riscv*) _install="zinstall dtbs_install";;
		*) _install=install;;
	esac

	make modules_install $_install \
		ARCH="$(_kernelarch $CARCH)" \
		INSTALL_MOD_PATH="$_outdir" \
		INSTALL_MOD_STRIP=1 \
		INSTALL_PATH="$_outdir"/boot \
		INSTALL_DTBS_PATH="$_outdir/boot/dtbs-$_buildflavor"

	cp Module.symvers.backup Module.symvers

	rm -f "$_outdir"/lib/modules/"$_abi_release"/build \
		"$_outdir"/lib/modules/"$_abi_release"/source
	rm -rf "$_outdir"/lib/firmware

	install -D -m644 include/config/kernel.release \
		"$_outdir"/usr/share/kernel/$_buildflavor/kernel.release

	case "$CARCH" in
	loongarch64)
		mv  "$_outdir"/boot/vmlinuz-$_abi_release \
			"$_outdir"/boot/vmlinuz-$_buildflavor

		mv  "$_outdir"/boot/config-$_abi_release \
			"$_outdir"/boot/config-$_buildflavor

		mv  "$_outdir"/boot/System.map-$_abi_release \
			"$_outdir"/boot/System.map-$_buildflavor
		;;
	esac
}

# main flavor installs in $pkgdir
package() {
	depends="$depends linux-firmware-any"

	_package "$_flavor" "$pkgdir"

	# copy files for linux-stable-doc sub package
	mkdir -p "$pkgdir"/usr/share/doc
	cp -r "$builddir"/Documentation \
		"$pkgdir"/usr/share/doc/linux-stable-doc-"$pkgver"/
	# remove files that aren't part of the documentation itself
	for nondoc in .gitignore conf.py docutils.conf Kconfig Makefile; do
		rm "$pkgdir"/usr/share/doc/linux-stable-doc-"$pkgver"/"$nondoc"
	done
	# create /usr/share/doc/linux-stable-doc symlink
	cd "$pkgdir"/usr/share/doc; ln -s linux-stable-doc-"$pkgver" linux-stable-doc
}

_dev() {
	local _flavor=$(echo $subpkgname | sed -E 's/(^linux-|-dev$)//g')
	local _builddir="$srcdir"/build-$_flavor.$CARCH
	local _abi_release="$(make -C "$_builddir" -s kernelrelease)"
	local _karch="$(_kernelarch $CARCH | sed 's/x86_64/x86/')"
	# copy the only the parts that we really need for build 3rd party
	# kernel modules and install those as /usr/src/linux-headers,
	# similar to what ubuntu does
	#
	# this way you dont need to install the 300-400 kernel sources to
	# build a tiny kernel module
	#
	pkgdesc="Headers and script for third party modules for $_flavor kernel"
	depends="$_depends_dev"
	local dir="$subpkgdir"/usr/src/linux-headers-"$_abi_release"
	set_kbuild_timestamp

	# first we import config, run prepare to set up for building
	# external modules, and create the scripts
	mkdir -p "$dir"
	cp -a "$_builddir"/.config "$_builddir"/localversion-alpine \
		"$dir"/

	install -D -t "$dir"/certs "$_builddir"/certs/signing_key.x509 || :

	# Install vmlinux.h
	install -Dm644 "$_builddir"/vmlinux.h -t "$dir/"

	make -C "$builddir" \
		O="$dir" \
		ARCH="$(_kernelarch $CARCH)" \
		AWK="${AWK:-mawk}" \
		prepare modules_prepare scripts

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the sources
	rm "$dir"/Makefile "$dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	cd "$builddir"
	find .  -path './include/*' -prune \
		-o -path './scripts/*' -prune -o -type f \
		\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
		   -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) \
		-print | cpio -pdm "$dir"

	cp -a scripts include "$dir"

	find "arch/$_karch" "tools/include" "tools/arch/$_karch" -type f -path '*/include/*' \
		-print | cpio -pdm "$dir"

	install -Dm644 "$srcdir"/build-$_flavor.$CARCH/Module.symvers \
		"$dir"/Module.symvers

	# remove unneeded things
	msg "Removing documentation..."
	rm -r "$dir"/Documentation
	sed -i -e '/Documentation/d' "$dir"/Kconfig
	find "$dir" -type f \( -name '*.o' -o -name '*.cmd' \) -exec rm -v -- {} +

	mkdir -p "$subpkgdir"/lib/modules/"$_abi_release"
	ln -sf /usr/src/linux-headers-"$_abi_release" \
		"$subpkgdir"/lib/modules/"$_abi_release"/build
}

sha512sums="
4cb5a0848214b7cd76d587226efde3077c06359c0c8c1de50952b7f8282cb83195d477b46844ea0eaef039448f45fc1a07a331bac86efc6bae33cd4ff58bd9aa  patch-6.15.10.patch.xz
d03788ffa8d8ae1b84ef1286bb44a08fc01432e509dfec6cccae5c5a5a47201d378aec2bcd21e6f0bbd1e625b26f47780c06ee9c1cef3775358f98b160923f30  linux-6.15.tar.xz
08d48b7ad4fccd38f1ab8cef67908c09a21268de74213d22a9933d0abe9cd54f1204242eec30beba747eaeb484faefedbcc75f5b56366abe223e186cf8eb4eee  0001-powerpc-boot-wrapper-Add-z-notext-flag-for-ppc64le.patch
571ce7b0a2611454ae56a4f540f946eff1655197025cf350f40901369bf4cb19ce5160c1eb71c6b6cc87a8d124c4b77df7d3a3badb841fc3cc473d78c6f942e5  0002-x86-Compress-vmlinux-with-zstd-19-instead-of-22.patch
66e1e60f0754ff8f3064e19fcf8ab6b8772b972f1f75825a2aca83e9bf4d18212e0542b36049c1c778624c1cb80218c5e6d9803a67807539ae3c4a1c7fcafa48  0003-kexec-add-kexec_load_disabled-boot-option.patch
808cbf6516b196a37ffc38d7089227b1179ba4330a2f71429237211600c3fd2ffbad5eed139baef6c824909316976989064c96984dc16ae73c4261a391912ae4  0004-objtool-respect-AWK-setting.patch
82ca7b8bce1a4c581e093282bb849b6007f45130321190bcacd2f8e0aec40eaab981ac31bc4e7d4ac0632acc7ab3e47fd030a98222e572e8195cfa927f1c5434  0005-powerpc-config-defang-gcc-check-for-stack-protector-.patch
7150ded100e67978ef2d350dd32075aa344108f8acb370f3f15404c2d74aa782fe3d07ad893063174a91a86d4602410c1045bfe07e5fa620a2a17e67eda6a175  0006-UPSTREAM-powerpc-boot-Fix-build-with-gcc-15.patch
41e2c3e3d4a94df8395969d218f882e22144d8ddc7b11dd7a1532de7ea915f3b4b22c638d395d158b64fe2c68fce5bd04036c8ea062d9af8426c1f0f54ac08bb  0007-UPSTREAM-libbpf-Avoid-possible-use-of-uninitialized-.patch
646389b5014356ab02e398245bee96d285341f83bd26827532448ed59f6516a916743201ec3a10f6bb1960053480faf0a96e0314d33a4d3e4fc51c457585a173  stable.aarch64.config
3eed488a01a12932d06af4c35a0f4f5c4cb679625ee9f566e5f79a8fa00c53a25137ce877e1cf0a5a1855194cb62eea408d65bb77f95a90c795df361729ff4cd  stable.armv7.config
8e083caed212374c552ff7f3b4abd4c37c0cd64898b8dcddd5112fa736ac6daed5886e4a19182e17c9256e76e28b0b34cbd0ae1d30d0e4cf32ee1ef0f045d8ac  stable.loongarch64.config
e0cf8c7cb36a4cdfd234ccc97cb1bfec0fb4c836dfe1c696a003937fae821c8beac0afdddc886e6afabf7cb9ea71f8446f64ef3b41be748e323e216ec66ccbb2  stable.ppc64le.config
e77cde7cbc2b91d32190c45e12d30c8542990c00cafa3350106039ee99f170f427038e686c4330f01cc746a9fc9f52558e82ccc0ad2f5f8d7d23a2d94d95ce5f  stable.riscv64.config
7a78f56f09b9aac498d0f79f83e8030179af8c48be434e2687e973e9dd6e698225ebabd0a8047d603efad0890329e6dc490613eb9b04cdace426accf58191505  stable.s390x.config
a5e9decab604e97eb5169ad2e5b2ad86c236ef563f86c96880b6c8df6d9e9044e93e4fff5b10028c061359af1a029adf109359dbb36c0cc9ffea44028b56a277  stable.x86.config
b13835fab4f9b1dd84e2a1362c3ffe6b9e05ffd6a0b56b7fcc62b22734f9a0d25559ce1a69098215214d9213f4d802aa98e7e994912981c66a4708292779c998  stable.x86_64.config
"
